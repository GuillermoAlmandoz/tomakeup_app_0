import pandas as pd
import plotly.express as px

import streamlit as st


from constants import EDA_DESCRIPTION, PLOTLY_THEMES
from data_repo import preprocess_data_eda, read_data


# ----------------------------------------------------------------------------------------------------------------------
def check_logged_in() -> bool:
    """
    Check if the user is logged in.

    Returns:
        bool: True if the user is logged in, False otherwise.
    """
    if not st.session_state["logged"]:
        st.warning("Inicia sesi칩n para acceder al an치lisis exploratorio de datos")
        return False
    return True


# ----------------------------------------------------------------------------------------------------------------------
def pagina_eda() -> None:
    st.subheader("游댌 An치lisis Exploratorio de Datos", divider="red")

    if not check_logged_in():
        return

    st.write(EDA_DESCRIPTION)

    eda_data = preprocess_data_eda()
    eda_data["resultado"] = eda_data["target"].map(
        {0: "Viscosidad correcta", 1: "Viscosidad incorrecta"}
    )

    col1, col2 = st.columns([3, 1])
    with col1:
        with st.expander("Datos de entrenamiento"):
            st.dataframe(eda_data)
    with col2:
        with st.expander("Tema colores"):
            tema_seleccionado = st.selectbox("", PLOTLY_THEMES)
            px.defaults.template = tema_seleccionado

    # Creamos dos columnas, una con un expander con la distribuci칩n de la columna target y otro con un expander con la
    # distribuci칩n de la columna target en un gr치fico de tarta
    col1, col2 = st.columns(2)

    with col1:
        with st.expander(
            "Distribuci칩n de la predicci칩n de viscosidad en un gr치fico de tarta",
            expanded=True,
        ):
            st.plotly_chart(
                plot_target_distribution(eda_data), use_container_width=True
            )

    with col2:
        with st.expander("Descripci칩n est치distica de los datos", expanded=True):
            plot_descripcion_estadistica(eda_data)

    with st.expander("Distribuci칩n de la producci칩n por  reactor", expanded=True):
        plot_distribucion_reactores(eda_data)

    with st.expander("Histogr치ma de variables num칠ricas"):
        plot_histograma_variable(eda_data)

    with st.expander("Relaci칩n entre las variables y la visocidad"):
        plot_relacion_variable_target(eda_data)

    with st.expander("Relaci칩n entre las variables - gr치fico de dispersi칩n"):
        plot_relacion_variable_variable(eda_data)

    with st.expander("Correlaci칩n entre las variables"):
        plot_correlacion_variables(eda_data)
    # run_eda()


# ----------------------------------------------------------------------------------------------------------------------
def plot_correlacion_variables(eda_data: pd.DataFrame) -> None:
    """
    Muestra una matriz de correlaci칩n de las variables num칠ricas del DataFrame proporcionado.
    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Verifica que las columnas a excluir existan en el DataFrame
    columns_to_drop = [
        col for col in ["fecha", "reactor", "resultado"] if col in eda_data.columns
    ]
    corr_matrix = eda_data.drop(columns=columns_to_drop).corr().round(2)

    # Crea un mapa de calor para visualizar la matriz de correlaci칩n
    fig = px.imshow(
        corr_matrix,
        text_auto=True,
        aspect="auto",
        color_continuous_scale="RdBu",
        labels=dict(x="Variable", y="Variable", color="Coeficiente de Correlaci칩n"),
    )

    # Muestra la figura en Streamlit ajust치ndose al ancho del contenedor
    st.plotly_chart(fig, use_container_width=True)


# ----------------------------------------------------------------------------------------------------------------------
def plot_relacion_variable_variable(eda_data: pd.DataFrame) -> None:
    """
    Crea y muestra un gr치fico de dispersi칩n para dos variables seleccionadas por el usuario.

    El gr치fico de dispersi칩n permite explorar la relaci칩n entre dos variables num칠ricas. El usuario
    elige las variables para los ejes X e Y a trav칠s de dos selectboxes en la interfaz de Streamlit.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Seleccionar variables para los ejes X e Y
    numeric_columns = eda_data.select_dtypes(include=["int64", "float64"]).columns
    x_var = st.selectbox("Variable eje X", numeric_columns)
    y_var = st.selectbox("Variable eje Y", numeric_columns)

    # Crear gr치fico de dispersi칩n con Plotly
    fig = px.scatter(
        eda_data,
        x=x_var,
        y=y_var,
        color="resultado",  # Categoriza los puntos por el campo 'resultado'
        size_max=15,  # Tama침o m치ximo para los marcadores
        opacity=0.5,  # Opacidad de los marcadores
    )
    fig.update_traces(marker={"size": 15})  # Tama침o de los marcadores en el gr치fico

    # Mostrar el gr치fico en Streamlit
    st.plotly_chart(fig, use_container_width=True)


# ----------------------------------------------------------------------------------------------------------------------
def plot_relacion_variable_target(eda_data: pd.DataFrame) -> None:
    """
    Crea y muestra un gr치fico de caja (boxplot) para explorar la relaci칩n entre una variable objetivo
    y otra variable num칠rica seleccionada por el usuario.

    Esta visualizaci칩n es 칰til para identificar tendencias, outliers y distribuciones en los datos en relaci칩n
    con la variable objetivo.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Seleccionar la variable num칠rica para analizar su relaci칩n con la variable objetivo
    numeric_columns = eda_data.select_dtypes(include=["int64", "float64"]).columns
    target_variable = st.selectbox(
        "Selecciona la variable a analizar",
        numeric_columns[numeric_columns != "target"],
    )

    # Crear y configurar el gr치fico de caja
    fig = px.box(
        eda_data,
        x="resultado",
        y=target_variable,
        points="all",  # Muestra todos los puntos de datos
    )

    # Mostrar el gr치fico en Streamlit
    st.plotly_chart(fig, use_container_width=True)


# ----------------------------------------------------------------------------------------------------------------------
def plot_descripcion_estadistica(eda_data: pd.DataFrame) -> None:
    """
    Muestra un resumen estad칤stico del DataFrame proporcionado.

    La funci칩n calcula estad칤sticas descriptivas como media, desviaci칩n est치ndar, m칤nimo,
    m치ximo y los percentiles para todas las columnas num칠ricas del DataFrame, y luego muestra
    estos datos en forma de tabla en Streamlit.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Calcular estad칤sticas descriptivas y redondear a 2 decimales
    description = eda_data.describe().round(2)

    # Mostrar el resumen estad칤stico en Streamlit
    st.dataframe(description)


# ----------------------------------------------------------------------------------------------------------------------
def plot_distribucion_reactores(eda_data: pd.DataFrame) -> None:
    """
    Crea y muestra un histograma que ilustra la distribuci칩n de la producci칩n por tipo de reactor.

    El histograma categoriza los datos por el tipo de reactor y los colorea seg칰n el resultado
    (campo 'resultado' en el DataFrame). Esta visualizaci칩n ayuda a identificar patrones o tendencias
    en la distribuci칩n de la producci칩n entre diferentes reactores.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Crear y configurar el histograma
    fig = px.histogram(
        eda_data,
        x="reactor",  # Variable para el eje X
        color="resultado",  # Categoriza los datos por 'resultado'
        barmode="group",  # Modo de agrupamiento para las barras
        title="Distribuci칩n de la producci칩n por reactor",  # T칤tulo del gr치fico
    )

    # Mostrar el histograma en Streamlit
    st.plotly_chart(fig, use_container_width=True)


# ----------------------------------------------------------------------------------------------------------------------
def plot_histograma_variable(eda_data: pd.DataFrame) -> None:
    """
    Crea y muestra un histograma para una variable num칠rica seleccionada por el usuario.

    El usuario puede elegir una variable num칠rica del DataFrame y decidir si quiere visualizar
    el histograma segmentado por el resultado de la viscosidad. Esto proporciona una visi칩n
    sobre la distribuci칩n de la variable seleccionada y, opcionalmente, c칩mo se relaciona con
    el resultado de la viscosidad.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos para el an치lisis.
    """

    # Seleccionar una variable num칠rica para el histograma
    numeric_columns = eda_data.select_dtypes(include=["int64", "float64"]).columns
    hist_variable = st.selectbox("Selecciona una variable", numeric_columns)

    # Opci칩n para segmentar por resultado de viscosidad
    segment_by_result = st.checkbox("Mostrar por resultado de viscosidad", value=True)

    # Crear y configurar el histograma
    histogram_params = {
        "data_frame": eda_data,
        "x": hist_variable,
        "title": f"Histograma de la variable {hist_variable}",
    }

    if segment_by_result:
        histogram_params["color"] = "resultado"
        histogram_params["barmode"] = "group"
        histogram_params["labels"] = {"target": "Resultado de viscosidad"}

    fig = px.histogram(**histogram_params)

    # Mostrar el histograma en Streamlit
    st.plotly_chart(fig, use_container_width=True)


# ----------------------------------------------------------------------------------------------------------------------
def plot_target_distribution(eda_data: pd.DataFrame) -> px.pie:
    """
    Crea un gr치fico de tarta que muestra la distribuci칩n de las categor칤as de la variable objetivo 'target'.

    El gr치fico de tarta facilita la visualizaci칩n de la proporci칩n entre diferentes categor칤as en la
    variable 'target'. Por ejemplo, puede mostrar la proporci칩n de resultados de viscosidad correcta
    versus incorrecta en un conjunto de datos.

    Args:
        eda_data (pd.DataFrame): DataFrame que contiene los datos, incluyendo la columna 'target'.

    Returns:
        plotly.graph_objs._figure.Figure: Un objeto de figura de Plotly que representa el gr치fico de tarta.
    """

    # Calcula el conteo de valores para la variable objetivo
    target_counts = eda_data["target"].value_counts()

    # Crea el gr치fico de tarta
    pie_chart = px.pie(
        names=target_counts.index,  # Nombres de las categor칤as
        values=target_counts.values,  # Valores correspondientes a cada categor칤a
        title="Distribuci칩n del objetivo 'target'",  # T칤tulo del gr치fico
    )

    # Asigna nombres m치s descriptivos a las categor칤as
    pie_chart.update_traces(labels=["Viscosidad correcta", "Viscosidad incorrecta"])

    return pie_chart
